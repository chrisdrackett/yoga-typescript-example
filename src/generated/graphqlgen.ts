// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Task } from "./prisma-client";
import { Context } from "../types";

export type TaskOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "completedAt_ASC"
  | "completedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "isComplete_ASC"
  | "isComplete_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "title_ASC"
  | "title_DESC";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface TaskWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    completedAt?: string | null;
    completedAt_not?: string | null;
    completedAt_in?: string[] | null;
    completedAt_not_in?: string[] | null;
    completedAt_lt?: string | null;
    completedAt_lte?: string | null;
    completedAt_gt?: string | null;
    completedAt_gte?: string | null;
    deletedAt?: string | null;
    deletedAt_not?: string | null;
    deletedAt_in?: string[] | null;
    deletedAt_not_in?: string[] | null;
    deletedAt_lt?: string | null;
    deletedAt_lte?: string | null;
    deletedAt_gt?: string | null;
    deletedAt_gte?: string | null;
    isComplete?: boolean | null;
    isComplete_not?: boolean | null;
    isDeleted?: boolean | null;
    isDeleted_not?: boolean | null;
    title?: string | null;
    title_not?: string | null;
    title_in?: string[] | null;
    title_not_in?: string[] | null;
    title_lt?: string | null;
    title_lte?: string | null;
    title_gt?: string | null;
    title_gte?: string | null;
    title_contains?: string | null;
    title_not_contains?: string | null;
    title_starts_with?: string | null;
    title_not_starts_with?: string | null;
    title_ends_with?: string | null;
    title_not_ends_with?: string | null;
    AND?: TaskWhereInput[] | null;
    OR?: TaskWhereInput[] | null;
    NOT?: TaskWhereInput[] | null;
  }

  export interface ArgsTasks {
    where?: TaskWhereInput | null;
    orderBy?: TaskOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsTask {
    id: string;
  }

  export type TasksResolver = (
    parent: undefined,
    args: ArgsTasks,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Task | null> | Promise<Array<Task | null>>;

  export type TaskResolver = (
    parent: undefined,
    args: ArgsTask,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Task | null | Promise<Task | null>;

  export interface Type {
    tasks: (
      parent: undefined,
      args: ArgsTasks,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Task | null> | Promise<Array<Task | null>>;

    task: (
      parent: undefined,
      args: ArgsTask,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Task | null | Promise<Task | null>;
  }
}

export namespace TaskResolvers {
  export const defaultResolvers = {
    id: (parent: Task) => parent.id,
    createdAt: (parent: Task) => parent.createdAt,
    updatedAt: (parent: Task) => parent.updatedAt,
    completedAt: (parent: Task) =>
      parent.completedAt === undefined ? null : parent.completedAt,
    deletedAt: (parent: Task) =>
      parent.deletedAt === undefined ? null : parent.deletedAt,
    isComplete: (parent: Task) => parent.isComplete,
    isDeleted: (parent: Task) => parent.isDeleted,
    title: (parent: Task) => parent.title
  };

  export type IdResolver = (
    parent: Task,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: Task,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Task,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CompletedAtResolver = (
    parent: Task,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DeletedAtResolver = (
    parent: Task,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type IsCompleteResolver = (
    parent: Task,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type IsDeletedResolver = (
    parent: Task,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type TitleResolver = (
    parent: Task,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Task,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: Task,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Task,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    completedAt: (
      parent: Task,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    deletedAt: (
      parent: Task,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    isComplete: (
      parent: Task,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    isDeleted: (
      parent: Task,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    title: (
      parent: Task,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateTask {
    title: string;
  }

  export interface ArgsSetDeleted {
    id: string;
    deletedAt: string;
  }

  export interface ArgsSetComplete {
    id: string;
    completedAt: string;
  }

  export interface ArgsSetIncomplete {
    id: string;
  }

  export interface ArgsUpdateTitle {
    id: string;
    title: string;
  }

  export type CreateTaskResolver = (
    parent: undefined,
    args: ArgsCreateTask,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Task | Promise<Task>;

  export type SetDeletedResolver = (
    parent: undefined,
    args: ArgsSetDeleted,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Task | Promise<Task>;

  export type SetCompleteResolver = (
    parent: undefined,
    args: ArgsSetComplete,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Task | Promise<Task>;

  export type SetIncompleteResolver = (
    parent: undefined,
    args: ArgsSetIncomplete,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Task | Promise<Task>;

  export type UpdateTitleResolver = (
    parent: undefined,
    args: ArgsUpdateTitle,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Task | Promise<Task>;

  export interface Type {
    createTask: (
      parent: undefined,
      args: ArgsCreateTask,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Task | Promise<Task>;

    setDeleted: (
      parent: undefined,
      args: ArgsSetDeleted,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Task | Promise<Task>;

    setComplete: (
      parent: undefined,
      args: ArgsSetComplete,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Task | Promise<Task>;

    setIncomplete: (
      parent: undefined,
      args: ArgsSetIncomplete,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Task | Promise<Task>;

    updateTitle: (
      parent: undefined,
      args: ArgsUpdateTitle,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Task | Promise<Task>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Task: TaskResolvers.Type;
  Mutation: MutationResolvers.Type;
}
